C++中virtual（虚函数）的用法

####################################################
什么是虚函数:

虚函数是指一个类中你希望重载的成员函数 ，当你用一个  基类指针或引用   
指向一个继承类对象的时候，调用一个虚函数时, 实际调用的是继承类的版本

####################################################

#include "stdio.h" 
#include "conio.h"

class Parent

{
    
public:
    
    char data[20];
    void Function1();    
    virtual void Function2();   // 这里声明Function2是虚函数
    
}parent;

void Parent::Function1()
{
    printf("This is parent,function1\n");
}

void Parent::Function2()

{
    printf("This is parent,function2\n");
}

class Child:public Parent

{
    void Function1();
    void Function2();
    
} child;

void Child::Function1()

{
    printf("This is child,function1\n");
}

void Child::Function2()

{
    printf("This is child,function2\n");
}

int main(int argc, char* argv[])

{
    Parent *p;  　　　　　// 定义一个基类指针
    if(_getch()=='c')    // 如果输入一个小写字母c    
        p=&child;        // 指向继承类对象
    else    
        p=&parent;       // 否则指向基类对象
    p->Function1();  　　 // 这里在编译时会直接给出Parent::Function1()的入口地址。    
    p->Function2();   　　// 注意这里，执行的是哪一个Function2？
    return 0;
   
}

####################################################

用任意版本的Visual C++或Borland C++编译并运行，输入一个小写字母c，得到下面的结果：
1 This is parent,function1
2 This is child,function2
为什么会有第一行的结果呢？
因为我们是用一个Parent类的指针调用函数Fuction1()，虽然实际上这个指针指向的是Child类的对象，但编译器无法知道这一事实（直到运行的时候，程序才可以根据用户的输入判断出指针指向的对象），它只能按照调用Parent类的函数来理解并编译，所以我们看到了第一行的结果。

那么第二行的结果又是怎么回事呢？我们注意到，Function2()函数在基类中被virtual关键字修饰，也就是说，它是一个虚函数。
虚函数最关键的特点是“动态联编”，它可以在运行时判断指针指向的对象，并自动调用相应的函数。

如果我们在运行上面的程序时任意输入一个非c的字符，结果如下：
1 This is parent,function1
2 This is parent,function2
请注意看第二行，它的结果出现了变化。程序中仅仅调用了一个Function2()函数，却可以根据用户的输入自动决定到底调用基类中的Function2还是继承类中的Function2，这就是虚函数的作用。
PS:一定要注意“静态联翩 ”和“ 动态联编 ”的区别；对于我来说，若没有在VC6.0中亲自去测试，凭自己的感觉，
当在键盘中输入“c”时，我会觉得由于有p=&child;这一句代码，我会认为结果都是：
1 This is child,function1
2 This is child,function2
但是结果却是：

1 This is parent,function1
2 This is child，function2
因为虽然实际上这个指针指向的是Child类的对象，但编译器无法知道这一事实，它只能按照调用Parent类的函数来理解并编译，所以我们看到了第一行的结果。
第二行中调用了子类的function2，完全是因为virtual 的功能，virtual实现了动态联编，它可以在运行时判断指针指向的对象，并自动调用相应的函数。
1 p=&parent;  //这一句，该指针很明显的是指向父类，那么肯定调用的是父类的方法

####################################################
使用虚函数，在内存和执行速度方面有一定的成本：
1.每个对象都将增大，增大量为存储地址的空间。
2.对于每个类，编译器都将创建一个虚函数地址表（数组）。
3.对于每个函数调用，都需要执行一项额外的操作，即到表中查找地址。


####################################################
有关虚函数注意事项
1.在基类方法的声明使用关键字virtual可使该方法在基类以及所有的派生类
 （包括从派生类派生出来的类）中是虚的。
2.如果使用指向对象的引用或者指针来调用虚方法，程序将使用为对象类型定义的方法，
  而不使用为引用或者指针类型定义的方法。这称为动态联编或晚期联编。这种行为非常重要，
  因为这样基类指针或引用可以指向派生类。
3.如果定义的类将被用作基类，则应将那些要在派生类中重新定义的类方法声明为虚的；

***构造函数
构造函数不能是虚函数。创建派生类对象时，将调用派生类的构造函数，而不是基类的构造函数，
然后，派生类的构造函数将使用基类的一个构造函数，这种顺序不同于继承机制。因此，
派生类不继承基类的构造函数，所以讲类构造函数声明为虚的没有意义。
***析构函数
析构函数应当是虚函数，除非类不用做基类。例如，假设Employee是基类，Singer是派生类，
并添加一个char*成员，该成员指向由new分配的内存。当Singer对象过期时，
必须调用～Singer()析构函数来释放内存；
Employee * pe = new Singer;//legal because Employee is base for Singer
delete pe;//~Employee() or ~Singer()?
**及时基类不需要显示析构函数提供服务，也不应该依赖于默认构造函数，而应该提供
  需析构函数，及时它不执行任何操作。 virtual ~BaseClass(){}
***友元
友元不能是虚函数，因为友元不是类成员，而只有成员才能是虚函数。如果由于这个原因引起
设计问题，可以通过让友元函数使用虚成员来解决。
***没有重新定义
如果派生类没有重新定义函数，将使用该函数的基类版本。如果派生类位于派生链中，
则将使用最新的虚函数版本，例外的情况是基类版本是隐藏的。
***重新定义将隐藏方法
class Dwelling{
    public:
        virtual void showperks(int a) const;
};

class Hovel:public Dwelling{
    public:
        virtual void showperks() const;
};

这将导致问题，可能会出现类似于下面这样的编译器警告：
Warning:Hovel::showperks(void) hides Dwelling::showperks(int)
1.如果重新定义继承的方法，应确保与原来的原型完全相同，如果返回类型是基类引用或指针，
则可以修改为指向派生类的引用或者指针（这种例外是新出现的）。这种特性被称为返回类型协变
（covariance of return type),因为允许返回类型随类类型的变化而变化：
**这种例外只适用于返回值，而不适用与参数。
class Dwelling{
    public:
        //a base method
        virtual Dwelling & build(int n);
};

class Hovel::public Dwelling{
    public:
    //a derived method with a covariant rerurn type
        virtual Hovel & build(int n);//same function signature
};

2.如果基类声明被重载了，则应在派生类中重新定义所有的基类版本。
**如果只重新定义一个版本则另外两个版本将被隐藏，派生类对象将无法使用他们。
注意，如果不需要修改，则新定义可只调用基类版本：
void Hovel::showperks() const{Dwelling::showperks();}
class Dwelling{
    public:
        //three overloaded showperks()
        virtual Dwelling showperks(int a) const;
        virtual Dwelling showperks(double x) const;
        virtual Dwelling showperks() const;
};

class Hovel::public Dwelling{
    public:
   //three overloaded showperks()
        virtual Dwelling showperks(int a) const;
        virtual Dwelling showperks(double x) const;
        virtual Dwelling showperks() const;
};