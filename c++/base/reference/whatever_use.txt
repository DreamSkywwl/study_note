####################
使用引用参数的主要原因
1.程序员能够修改调用函数中的数据对象。
2.通过传递引用而不是整个数据结构对象，可以提高程序的运行速度。


####################
当数据结构对象较大时(如结构和类对象)，第二个原因最重要。这些也是使用指针参数的原因。
这是有道理的，因为引用参数实际上是基于指针的代码的另一个接口。那么，什么时候应使用
引用/什么时候应该使用指针呢？什么时候应该按值传递呢？

####################
对于使用传递的值而不做修改的函数：
1.如果数据对象小，如内置数据类型或者小型结构，则按值传递。
2.如果数据结构是数组，则使用指针，因为这是唯一的选择，并将指针声名为指向const的指针。
3.如果数据对象是较大的结构，则使用const引用。类设计的语义常常要求使用引用，这是c++新增的
  这项特性的主要原因。因此，传递类对象参数的标准方式是按引用传递。

#####################
对于修改调用函数中数据的函数：
1.如果数据对象是内置数据类型，则使用指针。如果看到诸如fixit（&x)这样的代码（其中x是int）
  则很明显，该函数将修改x。
2.如果数据对象是数组，则只能使用指针。
3.如果数据对象是结构，则使用引用或指针。
4.如果数据对象是类结构，则使用引用。
