############################################
数组操作
***
创建数组
jintArray javaArray;
javaArray = (*env)->NewIntArray(env,10);
if(0 != javaArray){
    //使用数组
}

***
访问数组元素
jni提供两种访问java数组元素的方法，可以将数组的代码复制成c数组或者让jni提供直接指向数组元素的指针。

***
对副本的操作
将java数组区复制到c数组中
jint nativeArray[10];
(*env)->GetIntArrayRegion(env,javaArray,0,10,nativeArray);

***
原生代码可以像使用普通的c数组一样使用和修改数组元素。当原生代码想将所做的修改提交给Java数组时，
可以使用Set<Type>ArrayRegion函数将c数组复制回Java数组中。

从c数组向Java数组提交所做的修改
(*env)->SetIntArrayRegion(env,javaArray,0,10,nativeArray);

当数组很大时，为了对数组进行操作而复制数组会引起性能问题。在这种情况下，如果可能的话，
原生代码应该只获取或设置数组元素区域而不是获取整个数组。

***
对直接指针的操作
原生代码可以用Get<Type>ArrayElements函数获取只想数组元素的直接指针。
函数带有3个参数，第三个参数是可选参数，该可选参数名是isCopy，让调用者确定返回的c字符串地址指向副本还是
指向堆中的固定对象。

获得指向Java数组元素的直接指针
jint * nativeDirectArray;
jboolean isCopy;

nativeDirectArray = (*env)->GetIntArrayElements(env,javaArray,&isCopy);

***
因为可以想普通的c数组一样访问和处理数组元素，因此jni没提供访问和处理数组元素的方法，jni要求原生代码
使用完这些指针立即释放，否则会出现内存溢出。原生代码可以使用jni提供的Release<Type>ArrayElements
函数释放Get<Type>ArrayElements函数返回的c数组。

释放指向Java数组元素的直接指针
(*env)->ReleaseIntArrayElements(env,javaArray,nativeDirectArray,0);
该函数带有四个参数，第四个参数是释放模式。释放模式如下：
0 ：将内容复制回来并释放原生数组；
JNI_COMMIT ：将内容复制回来但不释放原生数组，一般用于周期性地更新一个Java数组；
JNI_ABORT ：释放原生数组但不将内容复制回来；

