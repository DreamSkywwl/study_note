####################################################
锁  重进入
####################################################
当一个线程请求其他线程已经占有的锁时，请求线程将被阻塞。然而内部可以重进入的，
因此线程在试图获取它自己占有的锁时，请求会成功。重进入意味着所(锁？)的请求是
每线程(pre-therad),而不是基于每调用(pre-invocation)的。重进入的实现是
通过每个锁关联一个请求计数(acquisition count)和一个占有它的线程。当计数为
0时，认为锁未被占有的。线程请求一个未被占有的锁时，jvm将记录锁的占有者，并将
请求计数置为1.如果同一线程再次请求这个锁，计数将递增；每次占用线程退出同步块，
计数器值将递减。直到计数器达到0时，锁被释放。
####################################################

public class Widget{
    public synchronized void doSomething(){
        //to do something
    }
}

public class LoggingWidget extends Widget{
    @Override
    public synchronized void doSomething(){
         System.out.println(toString() + ": calling doSomething");
         super.doSomething();
    }
}

重进入方便了锁行为的封装，因此简化了面向对象并发并发代码的开发。子类覆写了父类
synchronized类型方法，并调用父类中的方法。如果没有可重入得锁，这段看上去很自
然的代码会产生死锁。因为Widget和LoggingWidget中doSomething方法都是
synchronized类型的，都会在处理前试图获取Widget的锁。倘若内部锁不可重新入,
super.doSomething的调用永远无法得到Widget的锁，因为锁已经被占有，导致线程
会被永久的延迟，等待一个永远无法获得的锁。