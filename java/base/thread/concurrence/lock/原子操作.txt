####################################################
原子操作：假设有操作A和B，如果从执行A的线程角度来看，当其他线程执行B时，要么B全部执行完成，
要么一点都没有执行，这样A和B互为原子操作。
一个原子操作是指：该操作对于所有操作，包括它自己，都满足前面描述的状态。
####################################################

/**
 * Servlet使用AtomicLong统计请求数
 * AtomicLong为系统已有的线程安全类
 * java.util.concurrent.atomic 包中包含了原子变量(atomtic variable)类
 * 这些类用来实现数字和对象引用的原子状态转换
 */
@ThreadSafe
public class StatelessFactorizer implements Servlet {
    private final AtomicLong count = new AtomicLong(0);

    public long getCount() {
        return count.get();
    }

    public void service(ServletRequest req, ServletResponse resp) {
        BigInteger i = extractFromRequest(req);
        BigInteger[] factors = factor(i);
        count.incrementAndGet();
        encodeIntoResponse(resp, factors);
    }
}

####################################################
利用像AtomicLong这样已有的线程安全对象管理类的状态是非常实用的。相比于非线程安全对象，
判断一个线程安全对象的可能状态和状态的转换要容易的多，这简化了维护和验证线程安全性的工作。

####################################################


/**
 * 没有正确原子化的Servlet试图缓存它的最新结果
 * 当一个不变约束涉及多个变量时，变量间不是彼此独立的：某个变量的值会制约其他几个变量的值。
 * 因此，更新一个变量的时候，要在同一原子操作中更新其他几个。
 * 为了保护状态的一致性，要在单一的原子操作中更新相互关联的状态变量。
 */
@NotThreadSafe
public class UnsafeCachingFactorizer implements Servlet {
    private final AtomicReference<BigInteger> lastNumber = new AtomicReference<>();
    private final AtomicReference<BigInteger[]> lastFactors = new AtomicReference<>();

    public void service(ServletRequest req, ServletResponse resp) {
        BigInteger i = extractFromRequest(req);

        if(i.equals(lastNumber.get())){
            encodeIntoResponse(resp, lastFactors.get());
        }else{
            BigInteger[] factors = factor(i);
            lastNumber.set(i);
            lastFactors.set(factors);
            encodeIntoResponse(resp, factors);
        }
    }
}